{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#commands","title":"Commands","text":"<p>Downmixer is a library first. The <code>download</code> command specified below is purely for testing and convenience.</p> <ul> <li><code>downmixer download [spotify-id]</code> - Download a Spotify song to the current directory.</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>Downmixer is divided into a few modules that cover the basic process of gathering song/playlist information, downloading individual songs, converting them and tagging them appropriately. These modules are:</p> <ul> <li><code>file_tools</code> - converting and tagging</li> <li><code>matching</code> - matching results from an audio provider to song info from an info provider</li> <li><code>providers</code> - info, audio and lyrics providers (explained in the providers page)</li> <li><code>processing</code> - sample/convenience class to download one or more files - used by the command line tool</li> </ul> <p>Except for <code>processing</code>, these packages have no connection with each other except for the use of common data classes - they are made to be implemented by your application in whichever way is fits it best. The <code>processing</code> module gives an example of a spotDL-like downloader.</p>"},{"location":"#file-tools","title":"File Tools","text":"<p>This package uses FFmpeg and Mutagen to convert and tag downloaded files respectively.</p>"},{"location":"cli/","title":"CLI","text":"<p>Downmixer's purpose is not to be an end-user command line tool like spotDL, youtubeDL and others. It's a Python library to automate syncing of music from any music library, audio, and lyrics platform.</p> <p>That being said, Downmixer does provide a simple command line interface for convenience, testing and simple usage.</p> <p>It uses the default <code>BasicProcessor</code> class to search, download and convert a song, playlist or album. It uses the bundled <code>SpotifyInfoProvider</code>, meaning the <code>id</code> value must be a valid Spotify track, album or playlist ID.</p>"},{"location":"cli/#spotify-api-authentication","title":"Spotify API Authentication","text":"<p>The default <code>SpotifyInfoProvider</code> will use OAuth to authenticate its API requests. For that, you'll need to set up a Spotify developer account and provide the information as environment variables. The information needed is:</p> Env. Variable Name Value SPOTIPY_CLIENT_ID &lt;your client ID&gt; SPOTIPY_CLIENT_SECRET &lt;your client secret&gt; SPOTIPY_REDIRECT_URI &lt;one of your redirect URIs&gt; <p>On the first usage or when the token expires, the Spotipy library will open a webpage where you'll need to login, authorize the app and paste the URL you were redirected to.</p>"},{"location":"cli/#usage","title":"Usage","text":"<pre><code>downmixer [OPTIONS] {COMMAND}\n\n</code></pre>"},{"location":"cli/#positional-arguments","title":"Positional arguments","text":"<ul> <li><code>command</code><ul> <li>Command to execute. Currently, the only option is <code>download</code>.</li> </ul> </li> <li><code>id</code><ul> <li>A valid identifier for the info provider. By default, a valid Spotify ID, URI or URL for a track, album or playlist.</li> </ul> </li> </ul>"},{"location":"cli/#options","title":"Options","text":"<ul> <li><code>-h, --help</code></li> <li>Show the help message</li> <li><code>-t THREADS, --threads THREADS</code></li> <li>Number of threads to use for parallel downloads.</li> <li><code>-o OUTPUT, --output-folder OUTPUT</code></li> <li>Path to the folder in which the final processed files will be placed.</li> <li><code>-ip PROVIDER, --info-provider PROVIDER</code></li> <li>Info provider extending BaseInfoProvider to use. Defaults to 'SpotifyInfoProvider'.</li> <li><code>-ip-settings SETTINGS, --info-provider-settings SETTINGS</code></li> <li>Settings for the info provider as a JSON string. See documentation for available options for each provider.</li> <li><code>-ap PROVIDER, --audio-provider PROVIDER</code></li> <li>Audio provider extending BaseAudioProvider to use. Defaults to 'YouTubeMusicAudioProvider'.</li> <li><code>-ap-settings SETTINGS, --audio-provider-settings SETTINGS</code></li> <li>Settings for the audio provider as a JSON string. See documentation for available options for each provider.</li> <li><code>-lp PROVIDER, --lyrics-provider PROVIDER</code></li> <li>Lyrics provider extending BaseLyricsProvider to use. Defaults to 'AZLyricsProvider'.</li> <li><code>-lp-settings SETTINGS, --lyrics-provider-settings SETTINGS</code></li> <li>Settings for the lyrics provider as a JSON string. See documentation for available options for each provider.</li> </ul>"},{"location":"providers/","title":"Providers","text":"<p>Since Downmixer is made to be as platform-agnostic as possible, it works with a provider system. As they need to communicate with Downmixer, they are expected to follow a certain structure - however, outside of that, they are not limited on their capabilities.</p> <p>Providers MUST be packages which have classes derived from a base provider class in their <code>__init__.py</code> files. Additionally, info providers need a <code>library.py</code> file with classes overriding ALL library classes deriving from <code>BaseLibraryItem</code> (<code>Artist</code>, <code>Album</code>, <code>Song</code>, and<code>Playlist</code>). These base classes provide async search and download methods that must be overridden.</p>","boost":2},{"location":"providers/#info-providers","title":"Info Providers","text":"","boost":2},{"location":"providers/#bundled","title":"Bundled","text":"<ul> <li><code>SpotifyInfoProvider</code></li> </ul> <p>Where the songs will be searched for a query and (preferably, but not enforced by Downmixer) where the information for the final file's ID3 tags will be sourced from.</p>","boost":2},{"location":"providers/#audio-providers","title":"Audio Providers","text":"","boost":2},{"location":"providers/#bundled_1","title":"Bundled","text":"<ul> <li><code>YouTubeMusicAudioProvider</code></li> </ul> <p>Where the audio file will be downloaded from.</p>","boost":2},{"location":"providers/#lyrics-providers","title":"Lyrics Providers","text":"","boost":2},{"location":"providers/#bundled_2","title":"Bundled","text":"<ul> <li><code>AZLyricsProvider</code></li> </ul> <p>Where lyrics are searched for each song, and if found added to the song's ID3 tag.</p>","boost":2},{"location":"providers/library.py%20file/","title":"<code>library.py</code> file","text":"<p>Every info provider must include a <code>library.py</code> file which includes overrides for each of the <code>BaseLibraryItem</code> child classes:</p> <ul> <li><code>Artist</code></li> <li><code>Album</code></li> <li><code>Song</code></li> <li><code>Playlist</code></li> </ul> <p>The child classes must override the <code>from_provider</code> method, since that method needs to adapt depending on the API of the info provider. Sometimes it might be necessary to override the <code>from_provider_list</code> method as well.</p>"},{"location":"reference/library/","title":"<code>library</code>","text":"<p>Data classes to hold standardized metadata about songs, artists, and albums.</p>"},{"location":"reference/library/#downmixer.library.Album","title":"<code>Album</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLibraryItem</code></p> <p>Holds info about an album. <code>cover</code> should be a string containing a valid URL.</p>"},{"location":"reference/library/#downmixer.library.Album.slug","title":"<code>slug()</code>","text":"<p>Returns self with sluggified text attributes.</p>"},{"location":"reference/library/#downmixer.library.Artist","title":"<code>Artist</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLibraryItem</code></p> <p>Holds info about an artist.</p>"},{"location":"reference/library/#downmixer.library.Artist.slug","title":"<code>slug()</code>","text":"<p>Returns self with sluggified text attributes.</p>"},{"location":"reference/library/#downmixer.library.BaseLibraryItem","title":"<code>BaseLibraryItem</code>","text":"<p>Base class for library items containing standard methods to easily create class instances from the Spotify API. Child classes of this class must be implemented in all info providers.</p>"},{"location":"reference/library/#downmixer.library.BaseLibraryItem.from_provider","title":"<code>from_provider(data, extra_data=None)</code>  <code>classmethod</code>","text":"<p>Create an instance of this class from data coming from a provider's API.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data from the provider's API.</p> required <code>extra_data</code> <code>dict</code> <p>Extra data from provider's API to be used to make instances of this class.</p> <code>None</code> <p>Returns:</p> Type Description <p>An instance of this class.</p>"},{"location":"reference/library/#downmixer.library.BaseLibraryItem.from_provider_list","title":"<code>from_provider_list(data, extra_data=None)</code>  <code>classmethod</code>","text":"<p>Creates a list of instances of this class from a list of objects with data coming from a provider's API.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[Any]</code> <p>List of objects with data from the provider's API.</p> required <code>extra_data</code> <code>dict</code> <p>Extra data from provider's API to be used to make instances of this class.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list with instances of this class.</p>"},{"location":"reference/library/#downmixer.library.Song","title":"<code>Song</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseLibraryItem</code></p> <p>Holds info about a song.</p>"},{"location":"reference/library/#downmixer.library.Song.all_artists","title":"<code>all_artists: str</code>  <code>property</code>","text":"<p>str: All artists' names, separated by a comma.</p>"},{"location":"reference/library/#downmixer.library.Song.full_title","title":"<code>full_title: str</code>  <code>property</code>","text":"<p>str: Full title of the song, including all artists, in the format [artist 1, artist 2, ...] - [song name].</p>"},{"location":"reference/library/#downmixer.library.Song.title","title":"<code>title: str</code>  <code>property</code>","text":"<p>str: Title of the song, including artist, in the format '[primary artist] - [song name]'.</p>"},{"location":"reference/library/#downmixer.library.Song.slug","title":"<code>slug()</code>","text":"<p>Returns self with sluggified text attributes.</p>"},{"location":"reference/file_tools/","title":"<code>file_tools</code>","text":"<p>Code relating to the manipulation of files - converting and tagging audio files specifically.</p>"},{"location":"reference/file_tools/convert/","title":"<code>convert</code>","text":""},{"location":"reference/file_tools/convert/#downmixer.file_tools.convert.Converter","title":"<code>Converter</code>","text":""},{"location":"reference/file_tools/convert/#downmixer.file_tools.convert.Converter.__init__","title":"<code>__init__(download, format=Format.MP3, bitrate='320k')</code>","text":"<p>Holds information for FFmpeg to convert a download. By default, uses MP3 output format and 320kbps bitrate.</p> <p>Parameters:</p> Name Type Description Default <code>download</code> <code>Download</code> <p>Download object to be converted.</p> required <code>format</code> <code>Format</code> <p>Output format from the Format enum.</p> <code>MP3</code> <code>bitrate</code> <code>str</code> <p>Bitrate in kbps as a string denoting value with a 'k' in the end. Passed directly into FFmpeg.</p> <code>'320k'</code>"},{"location":"reference/file_tools/tag/","title":"<code>tag</code>","text":""},{"location":"reference/file_tools/tag/#downmixer.file_tools.tag.tag_download","title":"<code>tag_download(download)</code>","text":"<p>Tag the Download with metadata from its <code>song</code> attribute, overriding existing metadata.</p> <p>Parameters:</p> Name Type Description Default <code>download</code> <code>Download</code> <p>Downloaded file to be tagged with song data.</p> required"},{"location":"reference/file_tools/utils/","title":"<code>utils</code>","text":""},{"location":"reference/file_tools/utils/#downmixer.file_tools.utils.make_sane_filename","title":"<code>make_sane_filename(filename)</code>","text":"<p>Removed common illegal characters from names, especially for Windows.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename to be processed</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Filename with illegal characters replaced with '-'.</p>"},{"location":"reference/log/","title":"<code>log</code>","text":""},{"location":"reference/log/#downmixer.log.MillisecondFormatter","title":"<code>MillisecondFormatter</code>","text":"<p>               Bases: <code>Formatter</code></p> <p>A formatter for standard library 'logging' that supports '%f' wildcard in format strings.</p>"},{"location":"reference/matching/","title":"<code>matching</code>","text":"<p>Classes and methods to easily compare the compatibility of a result with a song being matched. Uses fuzzy string comparison with the RapidFuzz package.</p> <p>Matching is done individually on song name, primary artist, other artists, album name, and length - artist matches are calculated down to a single score value (scores go from 0 to 100). Therefore, the sum can be a range of 0 to 400.</p>"},{"location":"reference/matching/#downmixer.matching.MatchQuality","title":"<code>MatchQuality</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Thresholds to consider when getting the quality of a match. Values are based on the sum of all matches - if all are perfect, equals to 400.</p>"},{"location":"reference/matching/#downmixer.matching.MatchQuality--perfect-score-equals-400","title":"Perfect (score equals 400)","text":"<p>Both songs are exactly the same.</p>"},{"location":"reference/matching/#downmixer.matching.MatchQuality--great-score-over-390","title":"Great (score over 390)","text":"<p>Extremely likely songs are the same. Different platforms usually have small discrepancies in the matching value.</p>"},{"location":"reference/matching/#downmixer.matching.MatchQuality--good-score-over-280","title":"Good (score over 280)","text":"<p>Likely a different version of the same song, like a live version for example.</p>"},{"location":"reference/matching/#downmixer.matching.MatchQuality--mediocre-score-over-150","title":"Mediocre (score over 150)","text":"<p>Probably a cover from another artist or something else from the same artist.</p>"},{"location":"reference/matching/#downmixer.matching.MatchQuality--bad-score-equals-0","title":"Bad (score equals 0)","text":"<p>Not the same song.</p>"},{"location":"reference/matching/#downmixer.matching.MatchResult","title":"<code>MatchResult</code>  <code>dataclass</code>","text":"<p>Holds match results and provides convenient property methods to get/calculate quality and match score.</p>"},{"location":"reference/matching/#downmixer.matching.MatchResult.artists_match_avg","title":"<code>artists_match_avg: float</code>  <code>property</code>","text":"<p>Averages the match score of the list of artists. Returns zero if list is empty.</p>"},{"location":"reference/matching/#downmixer.matching.MatchResult.quality","title":"<code>quality: MatchQuality</code>  <code>property</code>","text":"<p>Returns the match quality from the enum <code>MatchQuality</code>.</p>"},{"location":"reference/matching/#downmixer.matching.MatchResult.sum","title":"<code>sum: float</code>  <code>property</code>","text":"<p>Sums all matches (uses average artist match value). Maximum value is 400.</p>"},{"location":"reference/matching/#downmixer.matching.MatchResult.all_above_threshold","title":"<code>all_above_threshold(threshold)</code>","text":"<p>Checks if all the scores are above the threshold value given.</p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Tha value that will be compared to all the values.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if every match score is higher than the threshold, false otherwise.</p>"},{"location":"reference/matching/#downmixer.matching.match","title":"<code>match(original_song, result_song)</code>","text":"<p>Returns match values using RapidFuzz comparing the two given song objects.</p> <p>Parameters:</p> Name Type Description Default <code>original_song</code> <code>Song</code> <p>Song to be compared to. Should be slugified for better results.</p> required <code>result_song</code> <code>Song</code> <p>Song being compared. Should be slugified for better results.</p> required <p>Returns:</p> Name Type Description <code>MatchResult</code> <code>MatchResult</code> <p>Match scores of the comparison between original and result song.</p>"},{"location":"reference/matching/utils/","title":"<code>utils</code>","text":""},{"location":"reference/matching/utils/#downmixer.matching.utils.ease","title":"<code>ease(x)</code>","text":"<p>Returns <code>y</code> according to this graph.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value to be placed in the curve.</p> required <p>Returns:</p> Name Type Description <code>y</code> <code>float</code> <p>The value placed in the curve.</p>"},{"location":"reference/matching/utils/#downmixer.matching.utils.remap","title":"<code>remap(x, o_min, o_max, n_min, n_max)</code>","text":"<p>Linearly map one range to another. For example, if the original range is 0 to 10 and the new range is 0 to 5, and <code>x</code> value of 5 will result in an output of 2.5.</p> <p>This function can handle negative values and inverted ranges. If the input is -10 to 0 and the new range is 5 to 10, the output will still be valid.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The value inside the old range to be remapped.</p> required <code>o_min</code> <code>float</code> <p>Minimum value of the old range.</p> required <code>o_max</code> <code>float</code> <p>Maximum value of the old range.</p> required <code>n_min</code> <code>float</code> <p>Minimum value of the new range.</p> required <code>n_max</code> <code>float</code> <p>Maximum value of the new range.</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>float</code> <p><code>x</code> modified to be fit inside the new range.</p>"},{"location":"reference/processing/","title":"<code>processing</code>","text":"<p>Takes a playlist or song and processes it using audio and lyric providers.</p>"},{"location":"reference/processing/#downmixer.processing.BasicProcessor","title":"<code>BasicProcessor</code>","text":""},{"location":"reference/processing/#downmixer.processing.BasicProcessor.__init__","title":"<code>__init__(info_provider, audio_provider_class, audio_provider_settings, lyrics_provider, output_folder, temp_folder, threads=3, max_retries=10)</code>","text":"<p>Basic processing class to search an ID and download it, using the providers passed on by the user. For playlist downloads, it uses an <code>asyncio.Semaphore</code> with a value of <code>threads</code> - so the number of concurrent downloads is equal to the <code>threads</code> value.</p> <p>Parameters:</p> Name Type Description Default <code>info_provider</code> <code>BaseInfoProvider</code> <p>Class instance to use when searching an ID.</p> required <code>audio_provider_class</code> <code>Type[BaseAudioProvider]</code> <p>Class reference to use when downloading songs.</p> required <code>audio_provider_settings</code> <code>str</code> <p>JSON formatted settings for the BaseAudioProvider.</p> required <code>lyrics_provider</code> <code>BaseLyricsProvider</code> <p>Class instance to use when downloading lyrics.</p> required <code>output_folder</code> <code>str</code> <p>Folder path where the final file will be placed.</p> required <code>temp_folder</code> <code>str</code> <p>Folder path where temporary files will be placed and removed from when processing is finished.</p> required <code>threads</code> <code>int</code> <p>Amount of threads that will simultaneously process songs.</p> <code>3</code>"},{"location":"reference/processing/#downmixer.processing.BasicProcessor.process_playlist","title":"<code>process_playlist(playlist_id)</code>  <code>async</code>","text":"<p>Searches and downloads all songs in a playlist using a queue with limited threads.</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>ID for the playlist to be downloaded.</p> required"},{"location":"reference/processing/#downmixer.processing.BasicProcessor.process_song","title":"<code>process_song(song_id)</code>  <code>async</code>","text":"<p>Searches and downloads a single song based on data provided by a <code>BaseInfoProvider</code>.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>Valid ID of a single track.</p> required"},{"location":"reference/providers/","title":"<code>providers</code>","text":"<p>Defines base provider classes and give default lyrics and audio providers.</p>"},{"location":"reference/providers/#downmixer.providers.AudioSearchResult","title":"<code>AudioSearchResult</code>  <code>dataclass</code>","text":"<p>Holds data about a result from a <code>BaseAudioProvider</code> instance.</p>"},{"location":"reference/providers/#downmixer.providers.AudioSearchResult.song","title":"<code>song: Song</code>  <code>property</code>","text":"<p>Compares the match quality with a set threshold and returns the most appropriate choice between the original song from Spotify or the result given by the provider.</p> <p>Returns:</p> Name Type Description <code>song</code> <code>Song</code> <p>The appropriate song object.</p>"},{"location":"reference/providers/#downmixer.providers.BaseAudioProvider","title":"<code>BaseAudioProvider</code>","text":"<p>Base class for all audio providers. Defines the interface that any audio provider in Downmixer should use.</p>"},{"location":"reference/providers/#downmixer.providers.BaseAudioProvider.__init__","title":"<code>__init__(options=None)</code>","text":"<p>Initializes the provider.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>dict</code> <p>Dictionary of options to pass to the provider. See documentation for each provider for available options.</p> <code>None</code>"},{"location":"reference/providers/#downmixer.providers.BaseAudioProvider.download","title":"<code>download(result, path)</code>  <code>async</code>","text":"<p>Downloads, using this provider, a search result to the path specified.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>AudioSearchResult</code> <p>The <code>AudioSearchResult</code> that matches with this provider class.</p> required <code>path</code> <code>Path</code> <p>The folder (not filename) in which the file will be downloaded.</p> required <p>Returns:</p> Type Description <code>Optional[Download]</code> <p>Download object with the downloaded file information.</p>"},{"location":"reference/providers/#downmixer.providers.BaseAudioProvider.search","title":"<code>search(song)</code>  <code>async</code>","text":"<p>Retrieves search results as list of <code>AudioSearchResult</code> objects ordered by match, highest to lowest. Can return None if a problem occurs.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>Song object which will be searched.</p> required <p>Returns:</p> Type Description <code>Optional[list[AudioSearchResult]]</code> <p>Optional list containing the search results as <code>AudioSearchResult</code> objects.</p>"},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider","title":"<code>BaseInfoProvider</code>","text":"<p>Base class for all song info providers. Defines the interface that any song info provider in Downmixer should use.</p> <p>Info providers are streaming platforms where a user has a library of songs, a.k.a. Spotify, YouTube Music, Deezer, Apple Music, etc. Used to get the user's library and read the data of that song on said platform.</p>"},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider.__init__","title":"<code>__init__(options=None)</code>","text":"<p>Initializes the provider.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>dict</code> <p>Dictionary of options to pass to the provider. See documentation for each provider for available options.</p> <code>None</code>"},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider.connect","title":"<code>connect()</code>","text":""},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider.get_all_playlist_songs","title":"<code>get_all_playlist_songs(playlist_id)</code>","text":"<p>Retrieves the all the songs from a playlist as a list. Args:     playlist_id (str): A string containing a valid ID for the provider.</p> <p>Returns:</p> Type Description <code>list[Song]</code> <p>User's playlists as a list of Song objects.</p>"},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider.get_all_user_playlists","title":"<code>get_all_user_playlists()</code>","text":"<p>Retrieves the all the user's playlists in a list.</p> <p>Returns:</p> Type Description <code>list[Playlist]</code> <p>User's playlists as a list of Playlist objects.</p>"},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider.get_all_user_songs","title":"<code>get_all_user_songs()</code>","text":"<p>Retrieves the all the user's liked/saved songs in a list (for example, on Spotify, should return user's saved tracks).</p> <p>Returns:</p> Type Description <code>list[Song]</code> <p>User's playlists as a list of Playlist objects.</p>"},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider.get_resource_type","title":"<code>get_resource_type(value)</code>","text":"<p>Determines the <code>ResourceType</code> of the library item.</p> <p>Returns:</p> Type Description <code>ResourceType | None</code> <p>Instance of <code>ResourceType</code> enum.</p>"},{"location":"reference/providers/#downmixer.providers.BaseInfoProvider.get_song","title":"<code>get_song(track_id)</code>","text":"<p>Retrieve a song from the info provider. Returns a new Song object with the metadata from the provider.</p> <p>Parameters:</p> Name Type Description Default <code>track_id</code> <code>str</code> <p>A string containing a valid ID for the provider.</p> required <p>Returns:</p> Type Description <code>Song</code> <p>Song object with the metadata retrieved from the provider.</p>"},{"location":"reference/providers/#downmixer.providers.BaseLyricsProvider","title":"<code>BaseLyricsProvider</code>","text":"<p>Base class for all lyrics providers. Defines the interface that any lyrics provider in Downmixer should use.</p>"},{"location":"reference/providers/#downmixer.providers.BaseLyricsProvider.__init__","title":"<code>__init__(options=None)</code>","text":"<p>Initializes the provider.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>dict</code> <p>Dictionary of options to pass to the provider. See documentation for each provider for available options.</p> <code>None</code>"},{"location":"reference/providers/#downmixer.providers.BaseLyricsProvider.get_lyrics","title":"<code>get_lyrics(result)</code>  <code>async</code>","text":"<p>Retrieves lyrics for a specific search result from this provider.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>LyricsSearchResult</code> <p>The song being searched.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional string with the lyrics of the song.</p>"},{"location":"reference/providers/#downmixer.providers.BaseLyricsProvider.search","title":"<code>search(song)</code>  <code>async</code>","text":"<p>Retrieves search results as list of <code>LyricsSearchResult</code> objects ordered by match, highest to lowest. Can return None if a problem occurs.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>Song object which will be searched.</p> required <p>Returns:</p> Type Description <code>Optional[list[LyricsSearchResult]]</code> <p>Optional list containing the search results as <code>LyricsSearchResult</code> objects.</p>"},{"location":"reference/providers/#downmixer.providers.Download","title":"<code>Download</code>  <code>dataclass</code>","text":"<p>               Bases: <code>AudioSearchResult</code></p> <p>A child of <code>AudioSearchResult</code> which has been successfully downloaded. Contains data about the downloaded file and its path.</p> <p>Attributes:</p> Name Type Description <code>filename</code> <code>Path</code> <p>Path to the downloaded song on the system.</p> <code>bitrate</code> <code>float</code> <p>The file's bitrate in kbps.</p> <code>audio_codec</code> <code>AudioCodecs</code> <p>One of the supported audio codecs from <code>AudioCodecs</code> enum.</p>"},{"location":"reference/providers/#downmixer.providers.Download.from_parent","title":"<code>from_parent(parent, filename, bitrate, audio_codec)</code>  <code>classmethod</code>","text":"<p>Make a Download instance with the information from a parent <code>ProviderSearchResult</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>AudioSearchResult</code> <p>The class instance being used.</p> required <code>filename</code> <code>Path</code> <p>Path to the downloaded song on the system.</p> required <code>bitrate</code> <code>float</code> <p>The file's bitrate in kbps.</p> required <code>audio_codec</code> <code>AudioCodecs</code> <p>One of the supported audio codecs from <code>AudioCodecs</code> enum.</p> required <p>Returns:</p> Name Type Description <code>cls</code> <code>Download</code> <p>Download instance with attributes from the <code>parent</code> object and other provided info.</p>"},{"location":"reference/providers/#downmixer.providers.LyricsSearchResult","title":"<code>LyricsSearchResult</code>  <code>dataclass</code>","text":"<p>Holds data about a result from a <code>BaseLyricsProvider</code> instance.</p>"},{"location":"reference/providers/#downmixer.providers.get_all_audio_providers","title":"<code>get_all_audio_providers()</code>","text":"<p>Imports providers from internal submodules folder and returns a list containing all subclasses of BaseAudioProvider.</p>"},{"location":"reference/providers/#downmixer.providers.get_all_info_providers","title":"<code>get_all_info_providers()</code>","text":"<p>Imports providers from internal submodules folder and returns a list containing all subclasses of BaseInfoProvider.</p>"},{"location":"reference/providers/#downmixer.providers.get_all_lyrics_providers","title":"<code>get_all_lyrics_providers()</code>","text":"<p>Imports providers from internal submodules folder and returns a list containing all subclasses of BaseLyricsProvider.</p>"},{"location":"reference/providers/audio/","title":"<code>audio</code>","text":""},{"location":"reference/providers/audio/youtube_music/","title":"<code>youtube_music</code>","text":""},{"location":"reference/providers/audio/youtube_music/#downmixer.providers.audio.youtube_music.album_from_ytmusic","title":"<code>album_from_ytmusic(data)</code>","text":"<p>Create an Album instance from a dict provided by the YouTube Music API search function. Sadly the only metadata of use form the search results is the title of the album. More info on the result's schema here.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary provided by the YouTube Music API from the <code>ytmusicapi</code> package.</p> required <p>Returns:</p> Type Description <code>Album</code> <p>Album instance populated from the dict.</p>"},{"location":"reference/providers/audio/youtube_music/#downmixer.providers.audio.youtube_music.artist_from_ytmusic","title":"<code>artist_from_ytmusic(data)</code>","text":"<p>Create an Artist instance from a dict provided by the YouTube Music API search function. Sadly the only metadata of use form the search results is the title of the artist. More info on the result's schema here.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary provided by the YouTube Music API from the <code>ytmusicapi</code> package.</p> required <p>Returns:</p> Type Description <code>Artist</code> <p>Artist instance populated from the dict.</p>"},{"location":"reference/providers/audio/youtube_music/#downmixer.providers.audio.youtube_music.search_result_from_ytmusic","title":"<code>search_result_from_ytmusic(original_song, result_song)</code>","text":"<p>Create an AudioSearchResult instance from a dict provided by the YouTube Music API search function. Sadly the only metadata of use form the search results is the title of the artist. More info on the result's schema here.</p> <p>Parameters:</p> Name Type Description Default <code>original_song</code> <code>Song</code> <p>Instance of a song from Spotify that will be compared against this search result.</p> required <code>result_song</code> <code>Song</code> <p>Song extracted from the search result info.</p> required <p>Returns:</p> Type Description <code>AudioSearchResult</code> <p>AudioSearchResult from YT Music.</p>"},{"location":"reference/providers/audio/youtube_music/#downmixer.providers.audio.youtube_music.song_from_ytmusic","title":"<code>song_from_ytmusic(data)</code>","text":"<p>Create a Song instance from a dict provided by the YouTube Music API search function, including the Artist and Album objects. More info on the result's schema here.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary provided by the YouTube Music API from the <code>ytmusicapi</code> package.</p> required <p>Returns:</p> Type Description <code>Song</code> <p>Song instance populated from the dict.</p>"},{"location":"reference/providers/info/","title":"<code>info</code>","text":""},{"location":"reference/providers/info/spotify/","title":"<code>spotify</code>","text":""},{"location":"reference/providers/info/spotify/library/","title":"<code>library</code>","text":""},{"location":"reference/providers/info/spotify/library/#downmixer.providers.info.spotify.library.SpotifySong","title":"<code>SpotifySong</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Song</code></p>"},{"location":"reference/providers/info/spotify/library/#downmixer.providers.info.spotify.library.SpotifySong.from_provider_list","title":"<code>from_provider_list(data, extra_data=None)</code>  <code>classmethod</code>","text":"<p>Takes in a list of tracks from the Spotify API and returns a list of SpotifySongs.</p>"},{"location":"reference/providers/lyrics/","title":"<code>lyrics</code>","text":""},{"location":"reference/providers/lyrics/azlyrics/","title":"<code>azlyrics</code>","text":""},{"location":"reference/providers/lyrics/azlyrics/#downmixer.providers.lyrics.azlyrics.search_result_from_azlyrics","title":"<code>search_result_from_azlyrics(result, original_song)</code>","text":"<p>Create a LyricsSearchResult instance from a Beautiful Soup 4 <code>ResultSet</code> from AZLyrics.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>ResultSet</code> required <code>original_song</code> <code>Song</code> <p>Instance of a song from Spotify that will be compared against this search result.</p> required <p>Returns:</p> Type Description <code>LyricsSearchResult</code> <p>LyricsSearchResult from AZLyrics.</p>"},{"location":"reference/utils/","title":"<code>utils</code>","text":""},{"location":"reference/utils/#downmixer.utils.merge_dicts_with_priority","title":"<code>merge_dicts_with_priority(dict1, dict2)</code>","text":"<p>Merges two dictionaries with priority to <code>dict1</code>.</p> <p>All keys and values from <code>dict1</code> will be returned in the new dictionary, substituting keys with different values from <code>dict2</code>. Keys and values exclusive to <code>dict2</code> will be returned as well. The function is recursively called for all nested dictionaries.</p> <p>Parameters:</p> Name Type Description Default <code>dict1</code> <code>dict</code> <p>Priority dictionary to merge. Values in dict1 are always in the returned dictionary.</p> required <code>dict2</code> <code>dict</code> <p>Secondary dictionary to merge.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Merged dictionary.</p>"}]}